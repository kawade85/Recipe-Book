// Explanation of Key Features and Difficulties Handled:
User Interface (HTML & CSS):

Semantic HTML5: Using header, main, section, form, div for a structured document.
Attractive Layout (CSS): Modern design with Roboto font, clear sections, shadows for depth, and responsive design using @media queries for different screen sizes.
Input Fields: input for name, textarea for ingredients and steps, input type="file" for image.
Recipe Display: Recipes are displayed in a grid format with recipe-card for visual appeal.
Modal for Details: A modal (div with hidden class initially) is used to display full recipe details when a card is clicked.
Add Recipes (JavaScript):

Form Handling: recipeForm.addEventListener('submit', ...) captures form submission.
Data Validation: Basic validation if (!recipeNameInput.value.trim() ...) ensures essential fields are not empty. You can expand this for more specific validation (e.g., ingredient format).
Image Handling (Client-Side):
input type="file" and FileReader are used.
reader.readAsDataURL(file) converts the selected image into a Base64 encoded string (Data URL). This string is then stored in the recipes array.
Important Note: This is a client-side solution. For a real-world application with large images or if you need images to persist across different browsers/devices, you would need a backend server to handle actual image uploads and storage. For this client-side project, Data URLs are sufficient.
Unique ID: Date.now() is used to generate a simple unique ID for each recipe, which is helpful for identifying them later (e.g., for showing details).
View Recipes (JavaScript):

displayRecipes(recipesToDisplay) function dynamically generates recipe-card elements based on the recipes array.
Each card is created with an image, name, and a snippet of ingredients.
Click to View Details: An event listener is added to each recipe-card to call showRecipeDetails(recipe.id) when clicked, opening the modal.
Search Functionality (JavaScript):

Keyword Search: The searchButton click listener (and an optional keyup for live search) filters the recipes array.
toLowerCase() and includes() are used for case-insensitive partial matching on recipe.name and recipe.ingredients.
displayRecipes(filteredRecipes) then updates the UI with only the matching recipes.
Storage (JavaScript - LocalStorage):

Persistence: localStorage is used to store the recipes array.
localStorage.setItem('recipes', JSON.stringify(recipes)) converts the JavaScript array to a JSON string and saves it.
JSON.parse(localStorage.getItem('recipes')) retrieves and converts the JSON string back to a JavaScript array.
loadRecipes() is called on DOMContentLoaded to load existing recipes.
saveRecipes() is called every time a recipe is added.
User Experience (JavaScript & CSS):

Clear Feedback: Alerts for successful additions or validation errors.
Image Preview: Users can see the selected image before adding the recipe.
Modal Dialog: Provides a focused view of recipe details without navigating away.
Responsive Design: Ensures the application looks good on various screen sizes.
Intuitive Interactions: Buttons and input fields are clearly labeled and functional.
Potential Enhancements for "Hard" Difficulty:
Edit/Delete Recipes: Add buttons to each recipe card (or within the detail modal) to allow users to modify or remove existing recipes.
Categories/Tags: Implement a way to categorize recipes (e.g., "Breakfast", "Lunch", "Dinner", "Dessert") and allow filtering by categories.
Rating System: A simple star rating system for recipes.
Print Functionality: A button to print the recipe details.
Sorting: Options to sort recipes by name, date added, etc.
More Robust Validation: Regular expressions for ingredient parsing, quantity validation, etc.
Accessibility (A11y): Add ARIA attributes for screen readers.
Offline Support (Service Workers): For a truly "hard" project, implement a service worker to make the application available offline.
Animations: Subtle CSS animations for transitions and interactions.